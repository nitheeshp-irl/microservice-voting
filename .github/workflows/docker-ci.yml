name: Build and Push to Docker Hub

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  id-token: write

env:
  DOCKER_HUB_USERNAME: nitheesh86
  DOCKER_HUB_REPOSITORY: microservice-voting

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Bump Type from Commit Message
        id: bump_type
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          if echo "$COMMIT_MSG" | grep -qE "BREAKING CHANGE|!:"; then
            echo "BUMP=major" >> $GITHUB_ENV
          elif echo "$COMMIT_MSG" | grep -iq "^feat:"; then
            echo "BUMP=minor" >> $GITHUB_ENV
          elif echo "$COMMIT_MSG" | grep -iq "^fix:"; then
            echo "BUMP=patch" >> $GITHUB_ENV
          else
            echo "No matching pattern, defaulting to patch."
            echo "BUMP=patch" >> $GITHUB_ENV
          fi

      - name: Determine Next Semantic Version
        id: get_version
        run: |
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/$DOCKER_HUB_USERNAME/$DOCKER_HUB_REPOSITORY/tags/?page_size=100" | \
                jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' || true)

          if [[ -z "$TAGS" ]]; then
            NEXT_VERSION="1.0.0"
          else
            LAST_VERSION=$(echo "$TAGS" | sort -V | tail -n 1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"

            case "$BUMP" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "Next version: $NEXT_VERSION"
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3    

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.NEXT_VERSION }}
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:latest

      - name: Tag Git Repo with Version (if not exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          if git ls-remote --tags origin | grep -q "refs/tags/v$NEXT_VERSION$"; then
            echo "Tag v$NEXT_VERSION already exists. Skipping tag push."
          else
            git tag -a "v$NEXT_VERSION" -m "Release v$NEXT_VERSION"
            git push origin "v$NEXT_VERSION"
          fi